import '@/styles/shot_scatter_plot.css'

import * as d3 from "d3";

import { useEffect, useRef } from "react"

import {
  useQuery,
  useQueryClient
} from '@tanstack/react-query'

import { groupBy } from "@/utils/jsHelpers";

import { getShotsByPOIU } from "@/utils/api/players"

export default function ShotsForScatterPlot({id}) {
  const queryClient = useQueryClient();
  const ref = useRef()

  // async state management
  const QUERY_KEY_SHOTS_BY_POIU = `getShotsForScatterByPOIU-${id}`
  let { isLoading, error, data, refetch } = useQuery({
    queryKey: [QUERY_KEY_SHOTS_BY_POIU],
    queryFn: async ()=> {
      return await getShotsByPOIU({poiu: id})
    },
    enabled: false, // this will only fetch once you get a player
    staleTime: Infinity,
  })

  // listen to changes in the id and refetch a different poiu
  useEffect(()=> {
    if (!id) return // guard

    queryClient.invalidateQueries(QUERY_KEY_SHOTS_BY_POIU)
    if (!data) {
      refetch()
    }
  }, [id])

  useEffect(()=> {
    if (!data) {
      return
    }

    createScatterPlot()

  }, [data])

  const MAX_WIDTH = 550
  const MAX_HEIGHT = 533
  const margin = { top: 70, right: 20, bottom: 50, left: 50 },
    width = MAX_WIDTH - margin.left - margin.right,
    height = MAX_HEIGHT - margin.top - margin.bottom

  const createScatterPlot = () => {
    const shotsFor = data.shots_for

    // remove and add.
    d3.select(ref.current).selectAll("*").remove();

    // when createing the svg
    const svg = d3
      .select(ref.current)
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");

    // x domain
    let yDomain = [-42.5, 42.5] // the dimensions of a hockey rink
    let xDomain = [0, 100]

    // colors from https://colorbrewer2.org/#type=qualitative&scheme=Paired&n=5
    let colors = [
      "#a6cee3",
      "#1f78b4",
      "#b2df8a",
      "#33a02c",
      "#fb9a99"
    ]
    // group by player names
    let shotsForByPlayersData = groupBy(shotsFor, "shooterName")

    // test
    let legendOffset = 150
    let legendWidth = MAX_WIDTH+legendOffset
    const legendMapping = [
      { cx: legendWidth / 6, label: "Circle 1" },
      { cx: legendWidth / 3, label: "Circle 2" },
      { cx: legendWidth / 2, label: "Circle 3" },
      { cx: (legendWidth / 3) * 2, label: "Circle 4" },
      { cx: (legendWidth / 6) * 5, label: "Circle 5" }
    ];

    // hold the colors to shooter names to display the text.
    let playerToColorMapping = {

    }

    // loop through players and return the mapping
    let legend = Object.keys(shotsForByPlayersData).map((name, index)=> {
      let legendMappingData = legendMapping[index]
      // name split after the first space.
      let player = name

      // until we have the player information
      let firstSpace = player.indexOf(' ')
      let lastName = player.slice(firstSpace + 1)

      // create the color to player mapping
      playerToColorMapping[name] = colors[index]

      return {
        ...legendMappingData,
        label: lastName,
        fullName:name,
        color: colors[index]
      }
    })

    console.log(playerToColorMapping)
    // Add X axis
    let xScale = d3.scaleLinear()
      .domain(xDomain)
      .range([ 0, width ]);

      svg.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(xScale));

    // Add Y axis
    let yScale = d3.scaleLinear()
      .domain(yDomain)
      .range([ height, 0]);
    svg.append("g")
      .call(d3.axisLeft(yScale));
    // add image to background
    svg.append('image')
      .attr('href', 'NHL_Hockey_Rink_half_formatted.png')
      .attr('width', width)
      .attr('height', height)
      .attr("class", "arena-image")
      // .attr("transform", `translate(0,-50%)`)
      // transform: translateX(-50%);
    // Add dots
    svg.append('g')
      .selectAll("dot")
      .data(shotsFor)
      .enter()
      .append("circle")
        .attr("cx", function (d) {
          return xScale(d.xCordAdjusted)
        } )
        .attr("cy", function (d) {
          return yScale(d.yCordAdjusted)
        } )
        .attr("r", 4)
        .style("fill", (d) => {
          // get the color from the mapping
          return playerToColorMapping[d.shooterName]
        })

    // add title
    svg.append("text")
    .attr("id", "title")
      .attr("x", margin.right +40)
      .attr("y", -margin.top+20)
      .attr("class", "title")
      .text("Shots generated by location on the ice")

    // create the legend
    legend.forEach((d,index) => {
      svg.append("circle")
        .attr("cx", d.cx - legendOffset)
        .attr("cy",  -margin.top+50)
        .attr("r", 5)
        .attr("fill", d.color)
        // .attr("class", "circle");

      // Append labels
      svg.append("text")
        .attr("x", d.cx- legendOffset +5 )
        .attr("y",  -margin.top+55)
        .attr("class", "label")
        .text(d.label);
    });
}


  console.log({isLoading, error, data})
  if (isLoading) {
    return <div width={MAX_WIDTH} height={MAX_HEIGHT}>
      Loading Shot Scatter plot...
    </div>
  }
  if (!data) {
    return <div width={MAX_WIDTH} height={MAX_HEIGHT}></div>
  }

  return <div className="flex items-center justify-center ">
    <svg width={MAX_WIDTH} height={MAX_HEIGHT} id={`shots-for-by-${id}`} ref={ref} >

    </svg>
  </div>
}
